#TODO prep in the docker image
.prep-ssh-ssm: &prep-ssh-ssm
  - |
    echo "install ssh and config"
    apt-get update
    apt-get install ssh python3 python3-pip -y
    mkdir ~/.ssh/
    cp ci-init/ssh-config ~/.ssh/config
    echo "install ssh-over-ssm script"
    cp ci-init/ssh-ssm.sh /usr/local/bin/ssh-ssm.sh
    chmod +x /usr/local/bin/ssh-ssm.sh
    echo "install AWS cli ssm plugin"
    curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
    dpkg -i session-manager-plugin.deb
    echo "reduce permissions on ansible folder - see https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir"
    chmod -R 644 ansible
    echo "verify versions"
    aws --version
    session-manager-plugin
    ssh -V
    python3 --version
    aws sts get-caller-identity

#TODO prep in the docker image
.prep-ansible: &prep-ansible
  - |
    python3 -m pip install ansible boto3
    ansible --version
    ansible-galaxy collection install amazon.aws

.assume-deployer-role: &assume-deployer-role
  - |
    role_arn="<arn-iam-to-assume>"
    credentials=$(aws sts assume-role --role-arn "$role_arn" --role-session-name "gitlabansible")
    export AWS_ACCESS_KEY_ID=$(echo "$credentials" | jq -r .Credentials.AccessKeyId)
    export AWS_SECRET_ACCESS_KEY=$(echo "$credentials" | jq -r .Credentials.SecretAccessKey)
    export AWS_SESSION_TOKEN=$(echo "$credentials" | jq -r .Credentials.SessionToken)
    echo AWS session set to assume role "$role_arn"

ansible-plan:
  stage: build
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  before_script:
    - echo "none to override"
  script:
    - *assume-deployer-role
    - *prep-ssh-ssm
    - *prep-ansible
    - aws sts get-caller-identity
    - bash ci-scripts/ansible-dry-run.sh $ENVIRONMENT

ansible-apply:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  before_script:
    - echo "none to override"
  script:
    - *assume-deployer-role
    - *prep-ssh-ssm
    - *prep-ansible
    - bash ci-scripts/ansible-apply.sh $ENVIRONMENT
  dependencies:
    - ansible-plan
  when: manual
  